from sqlalchemy.future import select
from database.engine import get_session
from database.models import Question, FAQ
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.enums import ChatType
from config import settings
import logging
import time
from aiogram.exceptions import TelegramBadRequest

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()

GROUP_CHAT_ID = settings.GROUP_CHAT_ID
ADMINS = settings.ADMINS

# --- FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
class AskQuestion(StatesGroup):
    waiting_for_question = State()
    waiting_for_anon_choice = State()

class FAQAdmin(StatesGroup):
    action = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è (add, edit, delete)
    waiting_for_faq_question = State()
    waiting_for_faq_answer = State()
    waiting_for_faq_edit_id = State()
    waiting_for_faq_edit_question = State()
    waiting_for_faq_edit_answer = State()
    waiting_for_faq_delete_id = State()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
main_menu_reply_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="FAQ üìö"), KeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚úçÔ∏è")],
        [KeyboardButton(text="–û –Ω–∞—Å ‚ÑπÔ∏è")]
    ],
    resize_keyboard=True
)

admin_menu_reply_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="FAQ üìö"), KeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚úçÔ∏è"), KeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å FAQ")],
        [KeyboardButton(text="–û –Ω–∞—Å ‚ÑπÔ∏è")]
    ],
    resize_keyboard=True
)

cancel_reply_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
    resize_keyboard=True,
    one_time_keyboard=True
)

def get_reply_kb(question_id: int):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å ‚úâÔ∏è", callback_data=f"reply_{question_id}"),
                InlineKeyboardButton(text="–ü–µ—Ä–µ–∑–∞–¥–∞—Ç—å üîÑ", callback_data=f"repeat_{question_id}")
            ]
        ]
    )

def get_faq_inline_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="FAQ üìö", callback_data="show_faq")],
            [InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚úçÔ∏è", callback_data="ask_question")]
        ]
    )

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è FAQ ---
def get_admin_faq_list_kb(faqs):
    kb = []
    for faq in faqs:
        kb.append([
            InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_faq_{faq.id}"),
            InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_faq_{faq.id}")
        ])
    kb.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å FAQ", callback_data="admin_add_faq")])
    return InlineKeyboardMarkup(inline_keyboard=kb)

admin_menu_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å FAQ", callback_data="admin_add_faq")],
        [InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å FAQ", callback_data="admin_edit_faq")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å FAQ", callback_data="admin_delete_faq")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_cancel")]
    ]
)

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
reply_waiting = {}
last_question_time = {}

# --- –•–µ–Ω–¥–ª–µ—Ä /start ---
@router.message(CommandStart())
async def start_cmd(msg: Message, state: FSMContext):
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç, —Å—Ç—É–¥–µ–Ω—Ç!\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω <b>–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–º —Å–æ–≤–µ—Ç–æ–º –í–®–£ –• –¶–¢ –ò–ö</b>, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ç–≤–æ—ë –æ–±—É—á–µ–Ω–∏–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ. –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n\n"
        "‚Äî <b>–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —É—á—ë–±–µ</b>;\n"
        "‚Äî <b>—Å–æ–æ–±—â–∏—Ç—å –æ –ø–æ–ª–æ–º–∫–µ –≤ –∫–æ—Ä–ø—É—Å–µ</b> (—Å–ª–æ–º–∞–Ω–Ω–∞—è –º–µ–±–µ–ª—å, –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å–≤–µ—Ç –∏ –¥—Ä.);\n"
        "‚Äî <b>–ø–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–æ–±–ª–µ–º–æ–π, —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å —É—á–µ–±–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º</b> (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è, —ç–∫–∑–∞–º–µ–Ω—ã –∏ –¥—Ä.).\n\n"
        "üìå <i>–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é –≤ –º–µ–Ω—é –∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∞ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ–º–æ—á—å. –û—Ç–≤–µ—Ç –ø—Ä–∏–¥—ë—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 2-—Ö –¥–Ω–µ–π.</i>\n\n"
        "‚ùóÔ∏è–í —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏, –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π, –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫ –∏–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ª–æ–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ, –∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –ø–æ—Å–ª–µ–¥—É–µ—Ç.\n"
        "‚ùóÔ∏è–ë–æ—Ç –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —ç—Ç–æ–π –æ–ø—Ü–∏–∏.\n\n"
        "<i>–¢–≤–æ–π –≤–∫–ª–∞–¥ –≤–∞–∂–µ–Ω ‚Äî –≤–º–µ—Å—Ç–µ –º—ã —Å–¥–µ–ª–∞–µ–º —É—á—ë–±—É –∫–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ!</i>"
    )
    # –í—ã–±–æ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∞–¥–º–∏–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    kb = admin_menu_reply_kb if msg.from_user.id in ADMINS else main_menu_reply_kb
    await msg.answer(welcome_text, parse_mode="HTML", reply_markup=kb)
    await state.clear()

# --- –•–µ–Ω–¥–ª–µ—Ä "–û –Ω–∞—Å" ---
@router.message(F.text == "–û –Ω–∞—Å ‚ÑπÔ∏è")
async def about_reply(msg: Message):
    # –¢–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö –∏ –º–µ–¥–∏–∞
    about_text = (
        "–ü—Ä–∏–≤–µ—Ç, —Å—Ç—É–¥–µ–Ω—Ç!\n\n"
        "–¢–≤–æ–∏ –ø—Ä–æ–±–ª–µ–º—ã –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã, –∏ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º, —á—Ç–æ–±—ã –∏—Ö —Ä–µ—à–∞—Ç—å. –ü–æ –≤—Å–µ–º —Å—Ä–æ—á–Ω—ã–º –∏ —Å–ª–æ–∂–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é –Ω–∞–º:\n\n"
        "<b>–ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å –°—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ —Å–æ–≤–µ—Ç–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –í–®–£</b> ‚Äî @anratnikovaa\n\n"
        "<b>–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—è –ø–æ —É—á–µ–±–Ω–æ-—Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</b> ‚Äî @pollillixs\n\n"
        "–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –Ω–∞—à–∏ –º–µ–¥–∏–∞, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π:\n\n"
        "<a href='https://vk.com/hsmedia'>HSMedia</a>\n"
        "<a href='https://vk.com/hsmedia'>–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç –í–®–£ | –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç</a>\n"
        "<a href='https://t.me/hsm_vshum'>–í–®–£–º</a>"
    )
    await msg.answer(about_text, parse_mode="HTML")


@router.message(F.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å FAQ')
async def admin_faq_panel(msg: Message, state: FSMContext):
    logger.info(f"[INFO] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å FAQ —á–µ—Ä–µ–∑ reply-–∫–Ω–æ–ø–∫—É: '{msg.text}'")
    if msg.from_user.id not in ADMINS:
        await msg.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")
        return
    faqs = await get_faqs()
    if not faqs:
        await msg.answer("FAQ –ø—É—Å—Ç. –ù–µ—á–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.", reply_markup=get_admin_faq_list_kb([]))
        await state.set_state(FAQAdmin.action)
        return
    text = "<b>FAQ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n"
    for i, faq in enumerate(faqs, 1):
        text += f"<b>{i}. {faq.question}</b>\n<blockquote>{faq.answer}</blockquote>\n"
    await msg.answer(text, parse_mode="HTML", reply_markup=get_admin_faq_list_kb(faqs))
    await state.set_state(FAQAdmin.action)

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ FAQ –∏–∑ –ë–î (–æ–±—â–∞—è –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π) ---
async def get_faqs():
    async for session in get_session():
        return (await session.execute(select(FAQ))).scalars().all()

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ FAQ ---
async def show_faq_list(chat: Message | CallbackQuery):
    faqs = await get_faqs()
    if not faqs:
        text = "FAQ –ø–æ–∫–∞ –ø—É—Å—Ç."
    else:
        text = "<b>FAQ üìö</b>\n\n"
        for i, faq in enumerate(faqs, 1):
            text += f"<b>{i}. {faq.question}</b>\n<blockquote>{faq.answer}</blockquote>\n\n"


    if isinstance(chat, Message):
        await chat.answer(text, parse_mode="HTML")
    else:
        try:
            await chat.message.edit_text(text, parse_mode="HTML")
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                raise

# --- –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ FAQ ---
@router.message(F.text == "FAQ üìö")
async def faq_reply(msg: Message):
    await show_faq_list(msg)

@router.callback_query(F.data == "show_faq")
async def faq_inline(callback: CallbackQuery):
    await show_faq_list(callback)
    await callback.answer()

# --- –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ ---
async def start_question_flow(chat: Message | CallbackQuery, state: FSMContext, user_id: int):
    now = time.time()
    last_time = last_question_time.get(user_id, 0)
    if now - last_time < 60:
        text = f"–ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É! –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë {int(60 - (now - last_time))} —Å–µ–∫."
        if isinstance(chat, CallbackQuery):
            await chat.answer(text, show_alert=True)
        else:
            await chat.answer(text)
        return
    last_question_time[user_id] = now

    text = "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:"
    kb = cancel_reply_kb if isinstance(chat, Message) else None
    if isinstance(chat, CallbackQuery):
        try:
            await chat.message.edit_text(text)
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                raise
    else:
        await chat.answer(text, reply_markup=kb)
    await state.set_state(AskQuestion.waiting_for_question)

# --- –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ ---
@router.message(F.text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚úçÔ∏è")
async def ask_question_reply(msg: Message, state: FSMContext):
    await start_question_flow(msg, state, msg.from_user.id)

@router.callback_query(F.data == "ask_question")
async def ask_question_inline(callback: CallbackQuery, state: FSMContext):
    await start_question_flow(callback, state, callback.from_user.id)
    await callback.answer()

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞ ---
@router.message(AskQuestion.waiting_for_question)
async def get_question(msg: Message, state: FSMContext):
    await state.update_data(question=msg.text)
    await msg.answer("–¢—ã —Ö–æ—á–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞–Ω–æ–Ω–∏–º–Ω–æ?",
                     reply_markup=ReplyKeyboardMarkup(
                         keyboard=[
                             [KeyboardButton(text="–ê–Ω–æ–Ω–∏–º–Ω–æ ü§´"), KeyboardButton(text="–ù–µ–∞–Ω–æ–Ω–∏–º–Ω–æ üôÇ")]
                         ],
                         resize_keyboard=True
                     ))
    await state.set_state(AskQuestion.waiting_for_anon_choice)

# --- –í—ã–±–æ—Ä –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ ---
@router.message(F.text.in_(["–ê–Ω–æ–Ω–∏–º–Ω–æ ü§´", "–ù–µ–∞–Ω–æ–Ω–∏–º–Ω–æ üôÇ"]), AskQuestion.waiting_for_anon_choice)
async def anon_choice(msg: Message, state: FSMContext, bot):
    data = await state.get_data()
    question = data.get("question")
    is_anon = msg.text == "–ê–Ω–æ–Ω–∏–º–Ω–æ ü§´"
    username = msg.from_user.username or "–ë–µ–∑ –Ω–∏–∫–∞"
    user_id = msg.from_user.id

    async for session in get_session():
        q = Question(user_id=user_id, username=username, question=question, is_anon=is_anon)
        session.add(q)
        await session.commit()
        await session.refresh(q)
        question_id = q.id

    head = f"<b><i>@{username} –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å:</i></b> ü§î" if is_anon else f"<b><i>{msg.from_user.full_name} (@{username}) –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å:</i></b> ü§î"
    text = f'{head}\n\n<blockquote>{question}</blockquote>'
    sent = await bot.send_message(GROUP_CHAT_ID, text, reply_markup=get_reply_kb(question_id), parse_mode="HTML")

    async for session in get_session():
        q = await session.get(Question, question_id)
        q.group_message_id = sent.message_id
        await session.commit()

    await msg.answer("–í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É!", reply_markup=main_menu_reply_kb)
    await state.clear()

# --- –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å (–∞–¥–º–∏–Ω) ---
@router.callback_query(F.data.startswith("reply_"))
async def reply_btn(callback: CallbackQuery, bot):
    if callback.from_user.id not in ADMINS:
        await callback.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã!", show_alert=True)
        return
    question_id = int(callback.data.split('_')[1])
    reply_waiting[callback.from_user.id] = question_id
    await bot.send_message(
        callback.from_user.id,
        f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å (ID: {question_id}) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"cancel_reply_{question_id}")]]
        )
    )
    await callback.answer()


@router.callback_query(F.data.startswith("cancel_reply_"))
async def cancel_reply(callback: CallbackQuery):
    reply_waiting.pop(callback.from_user.id, None)
    await callback.message.edit_text("–û—Ç–º–µ–Ω–∞ –æ—Ç–≤–µ—Ç–∞.")
    await callback.answer()


@router.message(StateFilter(None))
async def get_reply_text(msg: Message, state: FSMContext, bot):
    if msg.chat.type != ChatType.PRIVATE or msg.from_user.id not in ADMINS:
        return
    question_id = reply_waiting.get(msg.from_user.id)
    if not question_id:
        return

    answer_text = msg.text
    answer_username = msg.from_user.username or "–ë–µ–∑ –Ω–∏–∫–∞"

    async for session in get_session():
        q = await session.get(Question, question_id)
        if not q:
            await msg.answer("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            reply_waiting.pop(msg.from_user.id, None)
            return
        q.answer = answer_text
        q.answer_user_id = msg.from_user.id
        q.answer_username = answer_username
        await session.commit()
        group_message_id = q.group_message_id
        user_id = q.user_id

    await bot.send_message(
        user_id,
        f"–í–∞–º –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n<blockquote>{q.question}</blockquote>\n\n<b>–û—Ç–≤–µ—Ç:</b> {answer_text}",
        parse_mode="HTML"
    )

    await bot.edit_message_text(
        GROUP_CHAT_ID,
        group_message_id,
        f"<b>–û—Ç–≤–µ—á–µ–Ω–æ ‚úÖ</b>\n\n–í–æ–ø—Ä–æ—Å:\n<blockquote>{q.question}</blockquote>\n\n–û—Ç–≤–µ—Ç:\n<blockquote>{answer_text}</blockquote>\n<b>–û—Ç–≤–µ—Ç–∏–ª:</b> @{answer_username}",
        parse_mode="HTML"
    )

    await msg.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    reply_waiting.pop(msg.from_user.id, None)
    await state.clear()


# --- –ü–µ—Ä–µ–∑–∞–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ ---
@router.callback_query(F.data.startswith("repeat_"))
async def repeat_question(callback: CallbackQuery, bot):
    question_id = int(callback.data.split('_')[1])
    async for session in get_session():
        q = await session.get(Question, question_id)
        if not q:
            await callback.answer("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
    text = f"<b>–ü–µ—Ä–µ–∑–∞–¥–∞—ë–º –≤–æ–ø—Ä–æ—Å:</b>\n\n<blockquote>{q.question}</blockquote>"
    await bot.send_message(GROUP_CHAT_ID, text, reply_markup=get_reply_kb(question_id), parse_mode="HTML")
    await callback.answer("–í–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–∑–∞–¥–∞–Ω!")


# --- –û—Ç–∫—Ä—ã—Ç–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ FAQ ---


@router.callback_query(F.data == "admin_edit_faq")
async def admin_edit_faq_callback(callback: CallbackQuery, state: FSMContext):
    logger.info(f"[INFO] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å FAQ —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫—É")
    if callback.from_user.id not in ADMINS:
        await callback.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!", show_alert=True)
        return
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ FAQ:", reply_markup=admin_menu_kb)
    await state.set_state(FAQAdmin.action)
    await callback.answer()


# --- –û—Ç–º–µ–Ω–∞ –∞–¥–º–∏–Ω-–¥–µ–π—Å—Ç–≤–∏–π ---
@router.callback_query(F.data == "admin_cancel")
async def admin_cancel(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()
    await callback.answer()


# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ FAQ ---
@router.callback_query(F.data == "admin_add_faq", FAQAdmin.action)
async def admin_add_faq(callback: CallbackQuery, state: FSMContext):
    logger.info(f"[INFO] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—á–∏–Ω–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ FAQ")
    if callback.from_user.id not in ADMINS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!", show_alert=True)
        return
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –Ω–æ–≤–æ–≥–æ FAQ:")
    await state.set_state(FAQAdmin.waiting_for_faq_question)
    await callback.answer()


@router.message(FAQAdmin.waiting_for_faq_question)
async def admin_add_faq_question(msg: Message, state: FSMContext):
    await state.update_data(faq_question=msg.text)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è FAQ:")
    await state.set_state(FAQAdmin.waiting_for_faq_answer)


@router.message(FAQAdmin.waiting_for_faq_answer)
async def admin_add_faq_answer(msg: Message, state: FSMContext):
    data = await state.get_data()
    question = data.get("faq_question")
    answer = msg.text
    async for session in get_session():
        faq = FAQ(question=question, answer=answer)
        session.add(faq)
        await session.commit()
    await msg.answer("FAQ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=admin_menu_kb)
    await state.set_state(FAQAdmin.action)  # –í–æ–∑–≤—Ä–∞—Ç –≤ –ø–∞–Ω–µ–ª—å


# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FAQ ---
# --- –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FAQ –ø–æ inline-–∫–Ω–æ–ø–∫–µ ---
@router.callback_query(F.data.startswith("edit_faq_"), FAQAdmin.action)
async def edit_faq_callback(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMINS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!", show_alert=True)
        return
    try:
        faq_id = int(callback.data.split("_")[2])
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID FAQ!", show_alert=True)
        return
    async for session in get_session():
        faq = await session.get(FAQ, faq_id)
        if not faq:
            await callback.answer("FAQ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
    await state.update_data(faq_edit_id=faq.id, current_question=faq.question, current_answer=faq.answer)
    await callback.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å (—Ç–µ–∫—É—â–∏–π: {faq.question}) –∏–ª–∏ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:")
    await state.set_state(FAQAdmin.waiting_for_faq_edit_question)
    await callback.answer()


# --- –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ FAQ –ø–æ inline-–∫–Ω–æ–ø–∫–µ ---
@router.callback_query(F.data.startswith("delete_faq_"), FAQAdmin.action)
async def delete_faq_callback(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMINS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!", show_alert=True)
        return
    try:
        faq_id = int(callback.data.split("_")[2])
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID FAQ!", show_alert=True)
        return
    async for session in get_session():
        faq = await session.get(FAQ, faq_id)
        if not faq:
            await callback.answer("FAQ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
        await session.delete(faq)
        await session.commit()
    await callback.message.edit_text("FAQ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!", reply_markup=admin_menu_kb)
    await state.set_state(FAQAdmin.action)
    await callback.answer()


@router.callback_query(F.data == "admin_edit_faq", FAQAdmin.action)
async def admin_edit_faq(callback: CallbackQuery, state: FSMContext):
    logger.info(f"[INFO] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FAQ")
    if callback.from_user.id not in ADMINS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!", show_alert=True)
        return
    faqs = await get_faqs()
    if not faqs:
        await callback.message.edit_text("FAQ –ø—É—Å—Ç. –ù–µ—á–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.")
        await callback.answer()
        await state.set_state(FAQAdmin.action)
        return
    text = "<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä FAQ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n"
    for i, faq in enumerate(faqs, 1):
        text += f"{i}. {faq.question}\n"
    await callback.message.edit_text(text, parse_mode="HTML")
    await state.set_state(FAQAdmin.waiting_for_faq_edit_id)
    await callback.answer()


@router.message(FAQAdmin.waiting_for_faq_edit_id)
async def admin_edit_faq_id(msg: Message, state: FSMContext):
    try:
        faq_num = int(msg.text)
    except ValueError:
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä FAQ!")
        return
    faqs = await get_faqs()
    if not (1 <= faq_num <= len(faqs)):
        await msg.answer("–¢–∞–∫–æ–≥–æ FAQ –Ω–µ—Ç!")
        return
    faq = faqs[faq_num - 1]
    await state.update_data(faq_edit_id=faq.id, current_question=faq.question, current_answer=faq.answer)
    await msg.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å (—Ç–µ–∫—É—â–∏–π: {faq.question}) –∏–ª–∏ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:")
    await state.set_state(FAQAdmin.waiting_for_faq_edit_question)


@router.message(FAQAdmin.waiting_for_faq_edit_question)
async def admin_edit_faq_question(msg: Message, state: FSMContext):
    new_question = msg.text if msg.text != "-" else (await state.get_data()).get("current_question")
    await state.update_data(faq_edit_question=new_question)
    await msg.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç (—Ç–µ–∫—É—â–∏–π: {(await state.get_data()).get('current_answer')}) –∏–ª–∏ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:")
    await state.set_state(FAQAdmin.waiting_for_faq_edit_answer)


@router.message(FAQAdmin.waiting_for_faq_edit_answer)
async def admin_edit_faq_answer(msg: Message, state: FSMContext):
    data = await state.get_data()
    faq_id = data.get("faq_edit_id")
    new_question = data.get("faq_edit_question")
    new_answer = msg.text if msg.text != "-" else data.get("current_answer")
    async for session in get_session():
        faq = await session.get(FAQ, faq_id)
        faq.question = new_question
        faq.answer = new_answer
        await session.commit()
    await msg.answer("FAQ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=admin_menu_kb)
    await state.set_state(FAQAdmin.action)  # –í–æ–∑–≤—Ä–∞—Ç –≤ –ø–∞–Ω–µ–ª—å


# --- –£–¥–∞–ª–µ–Ω–∏–µ FAQ ---
@router.callback_query(F.data == "admin_delete_faq", FAQAdmin.action)
async def admin_delete_faq(callback: CallbackQuery, state: FSMContext):
    logger.info(f"[INFO] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—á–∏–Ω–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ FAQ")
    if callback.from_user.id not in ADMINS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!", show_alert=True)
        return
    faqs = await get_faqs()
    if not faqs:
        await callback.message.edit_text("FAQ –ø—É—Å—Ç. –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.")
        await callback.answer()
        await state.set_state(FAQAdmin.action)
        return
    text = "<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä FAQ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>\n"
    for i, faq in enumerate(faqs, 1):
        text += f"{i}. {faq.question}\n"
    await callback.message.edit_text(text, parse_mode="HTML")
    await state.set_state(FAQAdmin.waiting_for_faq_delete_id)
    await callback.answer()


@router.message(FAQAdmin.waiting_for_faq_delete_id)
async def admin_delete_faq_id(msg: Message, state: FSMContext):
    try:
        faq_num = int(msg.text)
    except ValueError:
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä FAQ!")
        return
    faqs = await get_faqs()
    if not (1 <= faq_num <= len(faqs)):
        await msg.answer("–¢–∞–∫–æ–≥–æ FAQ –Ω–µ—Ç!")
        return
    faq = faqs[faq_num - 1]
    async for session in get_session():
        await session.delete(faq)
        await session.commit()
    await msg.answer("FAQ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!", reply_markup=admin_menu_kb)
    await state.set_state(FAQAdmin.action)  # –í–æ–∑–≤—Ä–∞—Ç –≤ –ø–∞–Ω–µ–ª—å

