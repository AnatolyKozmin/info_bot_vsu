from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from database.engine import get_session
from database.models import Question, FAQ
from aiogram import Router, F
import time
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command, CommandStart, StateFilter
from config import settings
from aiogram.enums import ChatType

router = Router()

GROUP_CHAT_ID = settings.GROUP_CHAT_ID
ADMINS = settings.ADMINS


class AskQuestion(StatesGroup):
    waiting_for_question = State()
    waiting_for_anon_choice = State()
    waiting_for_answer = State()
    waiting_for_reply_text = State()
    waiting_for_reply_id = State()

class FAQAdmin(StatesGroup):
    waiting_for_faq_question = State()
    waiting_for_faq_answer = State()
    waiting_for_faq_edit_id = State()
    waiting_for_faq_edit_question = State()
    waiting_for_faq_edit_answer = State()
    waiting_for_faq_delete_id = State()

anon_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–ê–Ω–æ–Ω–∏–º–Ω–æ ü§´", callback_data="ask_anon"),
            InlineKeyboardButton(text="–ù–µ–∞–Ω–æ–Ω–∏–º–Ω–æ üôÇ", callback_data="ask_not_anon")
        ]
    ]
)

def get_reply_kb(question_id: int):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å ‚úâÔ∏è", callback_data=f"reply_{question_id}"),
                InlineKeyboardButton(text="–ü–µ—Ä–µ–∑–∞–¥–∞—Ç—å üîÑ", callback_data=f"repeat_{question_id}")
            ]
        ]
    )

def get_faq_inline_kb(is_admin=False):
    kb = [
        [InlineKeyboardButton(text="FAQ üìö", callback_data="show_faq")],
        [InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚úçÔ∏è", callback_data="ask_question")]
    ]
    if is_admin:
        kb.append([InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å FAQ", callback_data="admin_panel")])
    return InlineKeyboardMarkup(inline_keyboard=kb)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å: user_id -> question_id (–¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –≤ –õ–°)
reply_waiting = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å: user_id -> –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (timestamp)
last_question_time = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_menu_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="FAQ üìö", callback_data="show_faq")],
        [InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚úçÔ∏è", callback_data="ask_question")]
    ]
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
cancel_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_ask")]
    ]
)

admin_menu_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å FAQ", callback_data="admin_add_faq")],
        [InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å FAQ", callback_data="admin_edit_faq")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å FAQ", callback_data="admin_delete_faq")]
    ]
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞
after_question_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –µ—â—ë ‚úçÔ∏è", callback_data="ask_question")],
        [InlineKeyboardButton(text="FAQ üìö", callback_data="show_faq")]
    ]
)

@router.message(CommandStart())
async def start_cmd(msg: Message, state: FSMContext):
    is_admin = msg.from_user.id in ADMINS
    await msg.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_faq_inline_kb(is_admin)
    )
    await state.clear()

@router.callback_query(F.data == "admin_panel")
async def admin_panel_btn(callback: CallbackQuery):
    if callback.from_user.id not in ADMINS:
        await callback.answer()
        return
    await callback.message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å FAQ:", reply_markup=admin_menu_kb)
    await callback.answer()

@router.callback_query(F.data == "ask_question")
async def ask_question_btn(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    now = time.time()
    last_time = last_question_time.get(user_id, 0)
    if now - last_time < 60:
        await callback.answer(f"–ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É! –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë {int(60 - (now - last_time))} —Å–µ–∫.", show_alert=True)
        return
    last_question_time[user_id] = now
    await callback.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:", reply_markup=cancel_kb)
    await state.set_state(AskQuestion.waiting_for_question)
    await callback.answer()

@router.callback_query(F.data == "cancel_ask")
async def cancel_ask(callback: CallbackQuery, state: FSMContext):
    is_admin = callback.from_user.id in ADMINS
    await callback.message.edit_text("–í–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=get_faq_inline_kb(is_admin))
    await state.clear()

@router.message(Command("get_id"))
async def get_id_handler(msg: Message):
    await msg.answer(f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: <code>{msg.chat.id}</code>", parse_mode="HTML")

@router.message(AskQuestion.waiting_for_question)
async def get_question(msg: Message, state: FSMContext):
    await state.update_data(question=msg.text)
    await msg.answer("–¢—ã —Ö–æ—á–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞–Ω–æ–Ω–∏–º–Ω–æ?", reply_markup=anon_kb)
    await state.set_state(AskQuestion.waiting_for_anon_choice)

@router.callback_query(F.data.in_(["ask_anon", "ask_not_anon"]))
async def anon_choice(callback: CallbackQuery, state: FSMContext, bot):
    data = await state.get_data()
    question = data.get("question")
    is_anon = callback.data == "ask_anon"
    username = callback.from_user.username or "–ë–µ–∑ –Ω–∏–∫–∞"
    user_id = callback.from_user.id
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –ë–î
    async for session in get_session():
        q = Question(user_id=user_id, username=username, question=question, is_anon=is_anon)
        session.add(q)
        await session.commit()
        await session.refresh(q)
        question_id = q.id
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if is_anon:
        head = f"<b><i>@{username} –∑–∞–¥–∞–ª –æ—á–µ—Ä–µ–¥–Ω–æ–π –≤–æ–ø—Ä–æ—Å:</i></b> ü§î"
    else:
        head = f"<b><i>{callback.from_user.full_name} (@{username}) –∑–∞–¥–∞–ª –æ—á–µ—Ä–µ–¥–Ω–æ–π –≤–æ–ø—Ä–æ—Å:</i></b> ü§î"
    text = f'{head}\n\n<blockquote>{question}</blockquote>'
    sent = await bot.send_message(
        chat_id=GROUP_CHAT_ID,
        text=text,
        reply_markup=get_reply_kb(question_id),
        parse_mode="HTML"
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º id —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ
    async for session in get_session():
        q = await session.get(Question, question_id)
        q.group_message_id = sent.message_id
        await session.commit()
    await callback.message.answer("–í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É!", reply_markup=after_question_kb)
    await state.clear()

@router.callback_query(F.data.startswith("reply_"))
async def reply_btn(callback: CallbackQuery, state: FSMContext, bot):
    if callback.from_user.id not in ADMINS:
        await callback.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã!", show_alert=True)
        return
    question_id = int(callback.data.split('_')[1])
    await state.clear()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ
    await callback.answer()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç –≤ –õ–°
    reply_waiting[callback.from_user.id] = question_id
    await bot.send_message(
        chat_id=callback.from_user.id,
        text=f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å (ID: {question_id}) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"cancel_reply_{question_id}")]]
        )
    )

@router.callback_query(F.data.startswith("cancel_reply_"))
async def cancel_reply(callback: CallbackQuery, state: FSMContext):
    reply_waiting.pop(callback.from_user.id, None)
    await callback.message.edit_text("–û—Ç–º–µ–Ω–∞ –æ—Ç–≤–µ—Ç–∞.")
    await state.clear()

@router.message(StateFilter(None))
async def get_reply_text(msg: Message, state: FSMContext, bot):
    if msg.chat.type != ChatType.PRIVATE:
        return  # –ù–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–Ω–µ –ª–∏—á–∫–∏
    if msg.from_user.id not in ADMINS:
        return  # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å
    question_id = reply_waiting.get(msg.from_user.id)
    if not question_id:
        return  # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    answer_text = msg.text
    answer_user_id = msg.from_user.id
    answer_username = msg.from_user.username or "–ë–µ–∑ –Ω–∏–∫–∞"
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ë–î –∏ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ—É –æ –≤–æ–ø—Ä–æ—Å–µ
    async for session in get_session():
        q = await session.get(Question, question_id)
        if not q:
            await msg.answer("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            reply_waiting.pop(msg.from_user.id, None)
            return
        q.answer = answer_text
        q.answer_user_id = answer_user_id
        q.answer_username = answer_username
        await session.commit()
        group_message_id = q.group_message_id
        user_id = q.user_id
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∑–∞–¥–∞–≤—à–µ–º—É –≤–æ–ø—Ä–æ—Å
    await bot.send_message(
        chat_id=user_id,
        text=f"–í–∞–º –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n<blockquote>{q.question}</blockquote>\n\n<b>–û—Ç–≤–µ—Ç:</b> {answer_text}",
        parse_mode="HTML"
    )
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
    await bot.edit_message_text(
        chat_id=GROUP_CHAT_ID,
        message_id=group_message_id,
        text=f"<b>–û—Ç–≤–µ—á–µ–Ω–æ ‚úÖ</b>\n\n–í–æ–ø—Ä–æ—Å:\n<blockquote>{q.question}</blockquote>\n\n–û—Ç–≤–µ—Ç:\n<blockquote>{answer_text}</blockquote>\n<b>–û—Ç–≤–µ—Ç–∏–ª:</b> @{answer_username}",
        parse_mode="HTML"
    )
    await msg.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    reply_waiting.pop(msg.from_user.id, None)
    await state.clear()

@router.callback_query(F.data.startswith("repeat_"))
async def repeat_question(callback: CallbackQuery, bot):
    question_id = int(callback.data.split('_')[1])
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ –ë–î
    async for session in get_session():
        q = await session.get(Question, question_id)
        if not q:
            await callback.answer("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        text = f"<b>–ü–µ—Ä–µ–∑–∞–¥–∞—ë–º –≤–æ–ø—Ä–æ—Å:</b>\n\n<blockquote>{q.question}</blockquote>"
    await bot.send_message(
        chat_id=GROUP_CHAT_ID,
        text=text,
        reply_markup=get_reply_kb(question_id),
        parse_mode="HTML"
    )
    await callback.answer("–í–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–∑–∞–¥–∞–Ω!")

@router.callback_query(F.data == "show_faq")
async def show_faq(callback: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ FAQ –∏–∑ –ë–î
    async for session in get_session():
        faqs = (await session.execute(select(FAQ))).scalars().all()
    if not faqs:
        await callback.message.edit_text("FAQ –ø–æ–∫–∞ –ø—É—Å—Ç.", reply_markup=get_faq_inline_kb(callback.from_user.id in ADMINS))
        await callback.answer()
        return
    text = "<b>FAQ üìö</b>\n\n"
    for i, faq in enumerate(faqs, 1):
        text += f"<b>{i}. {faq.question}</b>\n<blockquote>{faq.answer}</blockquote>\n\n"
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=get_faq_inline_kb(callback.from_user.id in ADMINS))
    await callback.answer()

@router.message(Command("admin"))
async def admin_panel(msg: Message):
    if msg.from_user.id not in ADMINS:
        return
    await msg.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å FAQ:", reply_markup=admin_menu_kb)

@router.callback_query(F.data == "admin_add_faq")
async def admin_add_faq(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMINS:
        await callback.answer()
        return
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è FAQ:")
    await state.set_state(FAQAdmin.waiting_for_faq_question)
    await callback.answer()

@router.message(FAQAdmin.waiting_for_faq_question)
async def admin_add_faq_question(msg: Message, state: FSMContext):
    await state.update_data(faq_question=msg.text)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è FAQ:")
    await state.set_state(FAQAdmin.waiting_for_faq_answer)

@router.message(FAQAdmin.waiting_for_faq_answer)
async def admin_add_faq_answer(msg: Message, state: FSMContext):
    data = await state.get_data()
    question = data.get("faq_question")
    answer = msg.text
    async for session in get_session():
        faq = FAQ(question=question, answer=answer)
        session.add(faq)
        await session.commit()
    await msg.answer("FAQ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=admin_menu_kb)
    await state.clear()

@router.callback_query(F.data == "admin_edit_faq")
async def admin_edit_faq(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMINS:
        await callback.answer()
        return
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ FAQ
    async for session in get_session():
        faqs = (await session.execute(select(FAQ))).scalars().all()
    if not faqs:
        await callback.message.answer("FAQ –ø—É—Å—Ç.")
        await callback.answer()
        return
    text = "<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä FAQ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n"
    for i, faq in enumerate(faqs, 1):
        text += f"{i}. {faq.question}\n"
    await callback.message.answer(text, parse_mode="HTML")
    await state.set_state(FAQAdmin.waiting_for_faq_edit_id)
    await callback.answer()

@router.message(FAQAdmin.waiting_for_faq_edit_id)
async def admin_edit_faq_id(msg: Message, state: FSMContext):
    try:
        faq_num = int(msg.text)
    except ValueError:
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä FAQ!")
        return
    async for session in get_session():
        faqs = (await session.execute(select(FAQ))).scalars().all()
    if not (1 <= faq_num <= len(faqs)):
        await msg.answer("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ FAQ!")
        return
    faq = faqs[faq_num-1]
    await state.update_data(faq_edit_id=faq.id)
    await msg.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è FAQ (–∏–ª–∏ - —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å):\n–¢–µ–∫—É—â–∏–π: {faq.question}")
    await state.set_state(FAQAdmin.waiting_for_faq_edit_question)

@router.message(FAQAdmin.waiting_for_faq_edit_question)
async def admin_edit_faq_question(msg: Message, state: FSMContext):
    data = await state.get_data()
    faq_id = data.get("faq_edit_id")
    new_question = msg.text
    async for session in get_session():
        faq = await session.get(FAQ, faq_id)
        if new_question != "-":
            faq.question = new_question
        await session.commit()
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è FAQ (–∏–ª–∏ - —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å):")
    await state.set_state(FAQAdmin.waiting_for_faq_edit_answer)

@router.message(FAQAdmin.waiting_for_faq_edit_answer)
async def admin_edit_faq_answer(msg: Message, state: FSMContext):
    data = await state.get_data()
    faq_id = data.get("faq_edit_id")
    new_answer = msg.text
    async for session in get_session():
        faq = await session.get(FAQ, faq_id)
        if new_answer != "-":
            faq.answer = new_answer
        await session.commit()
    await msg.answer("FAQ –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=admin_menu_kb)
    await state.clear()

@router.callback_query(F.data == "admin_delete_faq")
async def admin_delete_faq(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMINS:
        await callback.answer()
        return
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ FAQ
    async for session in get_session():
        faqs = (await session.execute(select(FAQ))).scalars().all()
    if not faqs:
        await callback.message.answer("FAQ –ø—É—Å—Ç.")
        await callback.answer()
        return
    text = "<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä FAQ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>\n"
    for i, faq in enumerate(faqs, 1):
        text += f"{i}. {faq.question}\n"
    await callback.message.answer(text, parse_mode="HTML")
    await state.set_state(FAQAdmin.waiting_for_faq_delete_id)
    await callback.answer()

@router.message(FAQAdmin.waiting_for_faq_delete_id)
async def admin_delete_faq_id(msg: Message, state: FSMContext):
    try:
        faq_num = int(msg.text)
    except ValueError:
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä FAQ!")
        return
    async for session in get_session():
        faqs = (await session.execute(select(FAQ))).scalars().all()
    if not (1 <= faq_num <= len(faqs)):
        await msg.answer("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ FAQ!")
        return
    faq = faqs[faq_num-1]
    async for session in get_session():
        await session.delete(faq)
        await session.commit()
    await msg.answer("FAQ —É–¥–∞–ª—ë–Ω!", reply_markup=admin_menu_kb)
    await state.clear()
